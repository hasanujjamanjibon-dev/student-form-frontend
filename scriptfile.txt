function doGet(e) {
  try {
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("StudentData");
    const rows = sheet.getDataRange().getValues();
    const headers = rows[0];

    // যদি query param ?id= আসে
    if (e.parameter.id) {
      const rowId = parseInt(e.parameter.id);
      if (isNaN(rowId) || rowId <= 1 || rowId > rows.length) {
        return ContentService.createTextOutput(
          JSON.stringify({ success: false, message: "Invalid row id" })
        ).setMimeType(ContentService.MimeType.JSON);
      }

      const values = rows[rowId - 1]; // কারণ row index 1-based
      const rowData = {};
      headers.forEach((header, i) => {
        rowData[header] = values[i] || "";
      });

      return ContentService.createTextOutput(
        JSON.stringify({ success: true, data: rowData })
      ).setMimeType(ContentService.MimeType.JSON);
    }

    // যদি id না থাকে → সব row ফেরত দাও
    return ContentService.createTextOutput(
      JSON.stringify({ success: true, data: rows.slice(1) })
    ).setMimeType(ContentService.MimeType.JSON);

  } catch (error) {
    return ContentService.createTextOutput(
      JSON.stringify({ success: false, message: error.message })
    ).setMimeType(ContentService.MimeType.JSON);
  }
}


function doPost(e) {
  try {
    const requestBody = JSON.parse(e.postData.contents);
    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("StudentData");

    if (!sheet) {
      throw new Error("Sheet 'StudentData' not found.");
    }

    const headersList = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
    const newRow = [];
    
    headersList.forEach(header => {
      const dataKey = header.replace(/\s/g, '');
      newRow.push(requestBody[dataKey] || '');
    });
    
    sheet.appendRow(newRow);
    const row = sheet.getLastRow(); 
const baseUrl = "http://localhost:5173/print-preview"; 
const printLink = `${baseUrl}?id=${row}`;

sheet.getRange(row, headersList.length).setValue(printLink); // PrintLink কলামে সেভ


    const responseData = { success: true, message: "Data successfully added." };
    
    const output = ContentService.createTextOutput(JSON.stringify(responseData));
    output.setMimeType(ContentService.MimeType.JSON);
    
    return output;

  } catch (error) {
    const errorData = { success: false, message: "An error occurred: " + error.message };
    
    const output = ContentService.createTextOutput(JSON.stringify(errorData));
    output.setMimeType(ContentService.MimeType.JSON);
    
    return output;
  }
}

function doOptions(e) {
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Max-Age': 86400
  };
  
  return ContentService.createTextOutput('')
    .setMimeType(ContentService.MimeType.TEXT)
    .setHeaders(headers);
}
// ... (Your setupHeaders function remains the same)
// Optional: A function to set up headers automatically. Run this function once.
function setupHeaders() {
  const sheetName = "StudentData"; // Change this to your desired sheet name
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();

  let sheet = spreadsheet.getSheetByName(sheetName);
  if (!sheet) {
    sheet = spreadsheet.insertSheet(sheetName);
  }

  const headers = [
    // Student's Information
    "studentName", "studentMobile", "fatherName", "fatherMobile", "motherName",
    "motherMobile", "dob", "presentAddress", "permanentAddress",

    // Guarantor’s (Sponsor’s) Information
    "sponsorName", "sponsorFatherName", "sponsorMotherName", "sponsorPresentAddress",
    "sponsorPermanentAddress", "businessName", "businessType", "businessAddress",
    "officeNumber", "studentAnotherNumber",

    // Family Information
    "fatherNameFamily", "fatherDOB", "fatherOccupation", "motherNameFamily",
    "motherDOB", "motherOccupation", "siblingName", "siblingDOB", "siblingOccupation",

    // Educational Record
    "PrimarySchoolName", "PrimarySchoolAddress", "PrimaryAdmissionYear",
    "PrimaryGraduationYear", "SSCSchoolName", "SSCSchoolAddress", "SSCAdmissionYear",
    "SSCGraduationYear", "HSC_DiplomaSchoolName", "HSC_DiplomaSchoolAddress",
    "HSC_DiplomaAdmissionYear", "HSC_DiplomaGraduationYear", "HonorsSchoolName",
    "HonorsSchoolAddress", "HonorsAdmissionYear", "HonorsGraduationYear",
    "MastersSchoolName", "MastersSchoolAddress", "MastersAdmissionYear",
    "MastersGraduationYear",

    // Student's Running Academic Details
    "currentCollegeUniversityName", "currentSubject", "currentRollNo",
    "currentRegistrationNo", "currentAcademicYear", "currentSession", "currentStatus",

    // Japanese Language Test
    "JLPTScore", "JLPTExamDate", "JLPTResultPublishDate", "JLPTExpectedExamDate",
    "NATScore", "NATExamDate", "NATResultPublishDate", "NATExpectedExamDate",
    "JLCTScore", "JLCTExamDate", "JLCTResultPublishDate", "JLCTExpectedExamDate",
    "J_TestScore", "J_TestExamDate", "J_TestResultPublishDate", "J_TestExpectedExamDate",
    "Top_JScore", "Top_JExamDate", "Top_JResultPublishDate", "Top_JExpectedExamDate",
      // Link Print
      "PrintLink"
  ];

  // Set the headers in the first row.
  sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  Logger.log("Headers have been set up successfully.");
}